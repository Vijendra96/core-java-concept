	CLASSES AND OBJECT ====>

1. 	Non static member can't be used in any static context straight away.
2. 	We should use non static member inside a static context along with the reference of an object.
3. 	new H(); ==> object creation statement to H class.
4. 	object creation should be with a new operator.
5. 	H ref ==> reference variable creation.
6. 	We can access any non static member by using reference variable.
7. 	all objects are creating in the heap memory.
8. 	non static members will be loading to the memory for every object.
9. 	every object should have a reference to access the the object members (non static members)
10. 	object is also called as an instance.
11. 	all non static members are also called as an instance members.
12. 	all classes are derived data type. so, H comes under derived data type.ref is a H data type. so, ref is a derived data type variable.
13.   	all derived type variables can refer to an object. so, ref is refering to H type object. ref is a reference variable.

Note: 	removing a reference to any object can be done in two diff ways.
 	1.	first one is assigning a null to the existing reference.
	(a).	null is a keyword. its a default value to all derived datatypes.
	2.	we can assign a null to any class type reference or to any interface type reference.
	(a).	we can't use an object from an execution portion (stack) if object doesn't have even a single reference variable. This type of
		objects are called as abandoned (or) dead objects.
	(b).	if object having min one reference variable,then its called as a live object.

Note:	1.	assume reference is poiting to the first object.
	2.	assign another object to an existing reference to remove a reference to the first object.
	3.	one reference can't refer to more than one object.
	4.	a reference can refer to maximum one object. it can be 0 number of objects (or) one number of objects.

14.	We can create an object in any method.

Note:	1. 	object can be refered from different methods.
	2. 	object can be refered by multiple references.
		All these references can be from the same method or from different methods.

Note:	1. 	method can have a return type as a derived data type (class type)
	2. 	reference variable can be returned to the calling statement.
	3. 	while calling a method we can supply reference as an input through argument
	4. 	while calling a method we can get a reference as an output through return statement.

15.	We can access the members of an object straight away while creating an object.
	example : System.out.println(new W().i);
16	Its a one time usage. we can't use the same object afterwards because of no reference name.
17.	this way of usage is very rare in the projects.
18. 	If you print object or a reference, then we get a memory address of an object.
19.	we can create an object in the return statement itself.