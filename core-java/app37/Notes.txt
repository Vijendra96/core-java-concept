1. 	no class can be 100% abstract. eventhough every method is an abstract, class is not 100% abstract. the reason is, there is concrete 			constructor.
2. 	abstract class can have any number of abstract methods including zero number of abstract methods.
3. 	interface can become a member of java file.
4. 	class file is generating for an interface also while compiling.
5. 	interface can have any number of attributes.
6. 	every attribute is a public, static and final by default.
7. 	every attribute should be initialized while declaring itself.
8. 	if any member is a public, static and also final, then it is treated as a perfect constatnt. all interface attributes are perfect constants.
9. 	every attribute of an interface should be initialized while declaring itself because of final.
10.	all interface attributes are public by default. no need of public keyword explicitely.
11.	all interface attributes are static by default. no need of static keyword explicitely.
12.	all interface attributes are final by default. no need of final keyword explicitely.
13.	public, static, final can be in any order.
14.	every method of an interface is public and an abstract by default.
15.	interface allows only abstract methods in case of non static. Thats why abstract keyword is very optional.
16.	all members of an interface are public by default.
17.	if we want to provide an access level explicitely, then specify only public.
18.	we should not use any other access levels.
19.	construcor not allowed in the interface.
20.	IIB not allowed in the interface.
21.	SIB not allowed in the interface.
22.	non static method with an implementation not allowed in the interface.
23.	interface can have only constants and an abstract methods. no concrete member (with a defination) allowed in an interface.
24.	But in JDK1.8 new features introduced to an interface.
	1. defined static methods can be incorporated.
	2. defined non static with default methods can be incorporated.
25.	java file can have any number of class designs and interface designs.
26.	if any member is a public, then file name should be with a public member name.
27.	by default interface is not a public.but every members of an interface is public by default.
28.	use implements while developing a class with an interface.
29.	implements keyword should be represented through a dotted line from sub to super.
30.	extends keyword should be represented through a solid line from sub to super.
31.	all interface methods should be implemented in the sub class. otherwise declare subclass as an abstract.
32.	interface methods are public by default. we should implement with a public keyword in the sub class.
33.	class can implement any number of super interfaces. its a multiple inheritance.
34.	java supports multiple inheritance only through interfaces.
35.	java not supporting multiple inheritance through classes.
36.	one class can't extend more than one super class.
37.	class to class is extends
38.	interface to interface is extends
39.	class to interface is implements
40.	attributes of an interface can be used straight away through an interface name.
